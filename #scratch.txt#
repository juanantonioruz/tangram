(send-message ^{:host "smtp.sendgrid.net"
                             :user (System/getenv "SENDGRID_USERNAME")
                             :pass (System/getenv "SENDGRID_PASSWORD")}
                           {:from "me@draines.enjava.com"
                            :to "juanantonioruz@gmail.com"
                            :subject "Hi!"
                            :body "Test."})


(comment (defn mi-test-mail []
   (mail :user (System/getenv "SENDGRID_USERNAME")
         :password (System/getenv "SENDGRID_PASSWORD")
         :host "smtp.gmail.com"
         :port 465
         :ssl true
         :to ["juanantonioruz@gmail.com" ]
         :subject "I Have Rebooted." 
         :text "I Have Rebooted.")))

(comment (defn mail [& m]
   (let [mail (apply hash-map m)
         props (java.util.Properties.)
         SMTP_HOST_NAME "smtp.sendgrid.net"]

     (doto props

       (.put "mail.transport.protocol" "smtp")
       (.put "mail.smtp.host" SMTP_HOST_NAME)
       (.put "mail.smtp.port" 587)
       (.put "mail.smtp.user" (:user mail))
       (.put "mail.smtp.socketFactory.port"  (:port mail))
       (.put "mail.smtp.auth" "true"))

     (if (= (:ssl mail) true)
       (doto props
         (.put "mail.smtp.starttls.enable" "true")
         (.put "mail.smtp.socketFactory.class" 
               "javax.net.ssl.SSLSocketFactory")
         (.put "mail.smtp.socketFactory.fallback" "false")))

     (let [authenticator (proxy [javax.mail.Authenticator] [] 
                           (getPasswordAuthentication 
                             []
                             (javax.mail.PasswordAuthentication. 
                              (:user mail) (:password mail))))
           recipients (reduce #(str % "," %2) (:to mail))
           session (javax.mail.Session/getInstance props authenticator)
           msg     (javax.mail.internet.MimeMessage. session)]

       (.setFrom msg (javax.mail.internet.InternetAddress. (:user mail)))

       (.setRecipients msg 
                       (javax.mail.Message$RecipientType/TO)
                       (javax.mail.internet.InternetAddress/parse recipients))

       (.setSubject msg (:subject mail))
       (.setText msg (:text mail))
       (javax.mail.Transport/send msg)))))


(defn show-users-results [res]
  (let [$interface ($ :#interface)
        html-user-list  [:ul {:class "foo"}
                 (for [x res]
                   [:li (str  (:name x) "-" (:mail x)  "-" (:started x)  "-" (:ended x) ) [:a {:href "#" :bird (:id x ) :class :edit-bird} "edit"]])
                 ] 
        html-delete-all-button [:a {:href "#" :id :delete-all-users :value :delete-all-users} :delete-all-users]
        html-new-user [
                 :div {:id "new-bird-div"}
                                     [:h1 "insert new user"]
                                     [:label "bird-name"]
                                     [:input {:type :text :id :bird-name } ]
                                     [:br]
                                     [:label "bird-mail"]
                                     [:input {:type :text :id :bird-mail } ]
                                     [:br]
                                     [:label "bird-password"]
                                     [:input {:type :password :id :bird-password } ]
                                     [:br]
                                     [:label "bird-started"]
                                     [:input {:type :text :id :bird-started :class :bird-date} ]
                                     [:br]
                                     [:label "bird-ended"]
                                     [:input {:type :text :id :bird-ended :class :bird-date} ]
                                     [:br]
                                     [:input {:type :button :id :new-bird :value "new-bird"}]
                       ]        
        inner-html (hiccups/html
                    [:div {:id "tabs"}
                     [:ul
                      [:li [:a {:href "#tabs-1"} "User List"]]
                      [:li [:a {:href "#tabs-2"} "New User"]]
                      [:li [:a {:href "#tabs-3"} "Delete All Users"]]
                      ]
                     [:div {:id "tabs-1"} html-user-list]
                     [:div {:id "tabs-2"} html-new-user]
                     [:div {:id "tabs-3"} html-delete-all-button]
                     ]
                    )
        ]
    (-> $interface
        (show)
        (css {:background "pink"})        
        (inner inner-html))
    (-> ($ :#user-list) (attr "value" "hidde users"))
    )
  (listen! (by-id :delete-all-users) :click delete-all-users)
  (listen! (by-id :new-bird) :click send-new-user)
  (listen! (by-class :edit-bird) :click (fn [evt] (edit-bird evt)))

  (.tabs ($ :#tabs) )
  (.datepicker ($ :.bird-date) )
  
  )

(defn edit-bird [evt]
    (ui/init-loading)
  (let [bird-id (-> (current-target evt) (.getAttribute "bird"))]
    (remote-callback :find-user  [bird-id]
                     (fn [x]
                           
                       (-> ($ :#tabs-1)
                           (show)
                           (css {:background "pink"})        
                           (inner (hiccups/html
                                   [:div {:id "edit-bird-div"}
                                    [:h1 "Edit user"]
                                    [:label "bird-id"]
                                    [:input {:type :text :id :bird-id :value (:id x) } ]
                                    [:br]
                                    [:label "bird-name"]
                                     [:input {:type :text :id :bird-name :value (:name x) } ]
                                     [:br]
                                     [:label "bird-mail"]
                                     [:input {:type :text :id :bird-mail :value (:mail x) } ]
                                     [:br]
                                     [:label "bird-password"]
                                     [:input {:type :password :id :bird-password :value "xxx" } ]
                                     [:br]
                                     [:label "bird-started"]
                                     [:input {:type :text :id :bird-started :class :bird-date :value (:started x)} ]
                                     [:br]
                                     [:label "bird-ended"]
                                     [:input {:type :text :id :bird-ended :class :bird-date :value (:ended x)}  ]
                                     [:br]
                                     [:input {:type :button :id :edit-bird :value "edit-bird"}]]
                                   [:p (str "user found" x)])))
                       (ui/message-to-user (str "user found" x))
                       (.datepicker ($ :.bird-date) )
                       (ui/finish-loading)

                       
                       
                     ))
(listen! (by-id :edit-bird) :click update-user)
    (js/console.dir (-> (current-target evt) (.getAttribute "bird"))))
  
  
  )

(defn update-user

  (ui/init-loading)
  (let [name (get-value "bird-name")
        password (get-value "bird-password")
        mail (get-value "bird-mail")
        started (get-value "bird-started")
        ended (get-value "bird-ended")
        id (get-value "bird-id")
        ]
    (remote-callback :update-new-user [id name mail password started ended] (fn [x] (ui/finish-loading "user updated ok!")))
    )


  )

(defn delete-all-users []
;  (hidden-results)
  (remote-callback :user-delete-all  []
                   (fn [x]
                     (ui/hidden-results)
                     (ui/finish-loading)
                     (ui/message-to-user "all users have been deleted now!")
                     ))
  )

(defn print-users []
  (ui/init-loading)
    (remote-callback :user-list  []
                     (fn [x]
                       (show-users-results x)
                       (ui/finish-loading)
                       ) )
    
  (comment when (logging/is-logged?)
    )
  )


(defn get-value [id]
  (-> (by-id id) value)
  )

(defn  send-new-user []
  (ui/init-loading)
  (let [name (get-value "bird-name")
        password (get-value "bird-password")
        mail (get-value "bird-mail")
        started (get-value "bird-started")
        ended (get-value "bird-ended")
        ]
    (remote-callback :save-new-user [name mail password started ended] (fn [x] (ui/finish-loading "user saved ok!")))
    )
  )


(defn info []
  (js/console.info "INFOOO working ns"));; This buffer is for notes you don't want to save, and for Lisp evaluation.





;; If you want to create a file, visit that file with C-x C-f,

;; then enter the text in that file's own buffer.

 <!-- form action="login.php" method="post" id="loginForm"  novalidate>
        <fieldset>
            <legend>Login</legend>
            <div>
              <label for="email">Email Address</label>
              <input type="email" name="email" id="email" required>
            </div>
            <div>
              <label for="password">Password</label>
              <input type="password" name="password" id="password" required>
            </div>
            <div>
              <label for="submit"></label>
              <input type="button" value="Login &rarr;" id="new-user">
            </div>

                 </fieldset>
          </form-- >
